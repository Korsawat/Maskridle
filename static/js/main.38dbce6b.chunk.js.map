{"version":3,"sources":["components/DifficultySelector.js","components/SearchBar.js","components/AnswerBox.js","components/GameControls.js","App.js","reportWebVitals.js","index.js","maskrider.csv"],"names":["DifficultySelector","_ref","setDifficulty","handleDifficultyChange","level","React","createElement","onClick","SearchBar","characters","handleGuess","guesses","searchTerm","setSearchTerm","useState","showDropdown","setShowDropdown","filteredCharacters","filter","char","some","guess","Character","filteredDropdownOptions","toLowerCase","includes","className","type","value","onChange","e","target","placeholder","length","map","key","characterName","handleCharacterSelect","AnswerBox","chosenCharacter","difficulty","getComparisonStyle","chosen","field","chosenField","split","item","trim","guessField","chosenSet","Set","guessSet","intersection","has","size","style","backgroundColor","chosenValue","parseInt","guessValue","isNaN","index","Gender","Species","Affiliation","Ep","Form","Era","Release","GameControls","giveUp","resetGame","App","setCharacters","setChosenCharacter","selectedCharacter","setSelectedCharacter","setGuesses","gameWon","setGameWon","remainingGuesses","setRemainingGuesses","useEffect","Papa","parse","maskRiderData","download","header","complete","result","data","startGame","difficultyLevel","randomCharacter","Math","floor","random","console","log","Infinity","guessName","guessedCharacter","find","alert","prev","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.38dbce6b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DifficultySelector = ({ setDifficulty }) => {\r\n  const handleDifficultyChange = (level) => {\r\n    setDifficulty(level); // Update the difficulty in App.js\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => handleDifficultyChange(\"easy\")}>Easy</button>\r\n      <button onClick={() => handleDifficultyChange(\"normal\")}>Normal</button>\r\n      <button onClick={() => handleDifficultyChange(\"hard\")}>Hard</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DifficultySelector;\r\n","import React, { useState } from \"react\";\r\n\r\nconst SearchBar = ({ characters, handleGuess, guesses }) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  // Filter characters to exclude already guessed ones\r\n  const filteredCharacters = characters.filter(\r\n    (char) => !guesses.some((guess) => guess.Character === char.Character)\r\n  );\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n    setShowDropdown(true); // Show dropdown when typing\r\n  };\r\n\r\n  const handleCharacterSelect = (characterName) => {\r\n    handleGuess(characterName);\r\n    setSearchTerm(\"\"); // Clear the search term\r\n    setShowDropdown(false); // Hide dropdown after selection\r\n  };\r\n\r\n  const filteredDropdownOptions = filteredCharacters.filter((char) =>\r\n    char.Character.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <input\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        onChange={handleSearchChange}\r\n        placeholder=\"Search Mask Rider\"\r\n      />\r\n      {showDropdown && searchTerm && (\r\n        <div className=\"dropdown\">\r\n          {filteredDropdownOptions.length > 0 ? (\r\n            filteredDropdownOptions.map((char) => (\r\n              <div\r\n                key={char.Character}\r\n                onClick={() => handleCharacterSelect(char.Character)}\r\n                className=\"dropdown-item\"\r\n              >\r\n                {char.Character}\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div className=\"dropdown-item\">No results</div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst AnswerBox = ({ chosenCharacter, guesses = [], difficulty }) => {\r\n  if (!chosenCharacter || guesses.length === 0) return null;\r\n\r\n  const getComparisonStyle = (chosen, guess, field) => {\r\n    if (field === 'Rider type' || field === 'Species') {\r\n      const chosenField = (chosen[field] || \"\").split(', ').map(item => item.trim());\r\n      const guessField = (guess[field] || \"\").split(', ').map(item => item.trim());\r\n\r\n      const chosenSet = new Set(chosenField);\r\n      const guessSet = new Set(guessField);\r\n\r\n      const intersection = new Set([...guessSet].filter(item => chosenSet.has(item)));\r\n\r\n      if (intersection.size === chosenSet.size && intersection.size === guessSet.size) {\r\n        return { className: 'correct', style: { backgroundColor: '#a5d6a7' } }; // Exact match: green\r\n      } else if (intersection.size > 0) {\r\n        return { className: 'partial', style: { backgroundColor: '#fff176' } }; // Partial match: yellow\r\n      } else {\r\n        return { className: 'incorrect', style: { backgroundColor: '#ef9a9a' } }; // No match: red\r\n      }\r\n    } else if (['Ep', 'Form', 'Release'].includes(field)) {\r\n      const chosenValue = parseInt(chosen[field], 10);\r\n      const guessValue = parseInt(guess[field], 10);\r\n\r\n      if (isNaN(guessValue) || isNaN(chosenValue)) return { className: 'incorrect', style: { backgroundColor: '#ef9a9a' } };\r\n\r\n      if (guessValue === chosenValue) {\r\n        return { className: 'correct', style: { backgroundColor: '#a5d6a7' } };\r\n      } else if (guessValue < chosenValue) {\r\n        return { className: 'higher', style: { backgroundColor: '#ffcdd2' } };\r\n      } else {\r\n        return { className: 'lower', style: { backgroundColor: '#ffcdd2' } };\r\n      }\r\n    } else {\r\n      return guess[field] === chosen[field]\r\n        ? { className: 'correct', style: { backgroundColor: '#a5d6a7' } }\r\n        : { className: 'incorrect', style: { backgroundColor: '#ef9a9a' } };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"answer-box\">\r\n      <h2>Guess History</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Character</th>\r\n            <th>Gender</th>\r\n            <th>Rider Type</th>\r\n            <th>Eyes Color</th>\r\n            <th>Species</th>\r\n            <th>Affiliation</th>\r\n            <th>First Appear</th>\r\n            <th>Episode</th>\r\n            <th>Form</th>\r\n            <th>Era</th>\r\n            {difficulty === 'easy' && <th>Release</th>}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {guesses.map((guess, index) => (\r\n            <tr key={index}>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Character')}>{guess.Character}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Gender')}>{guess.Gender}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Rider type')}>{guess[\"Rider type\"]}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Eyes colors')}>{guess[\"Eyes colors\"]}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Species')}>{guess.Species}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Affiliation')}>{guess.Affiliation}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'First appear')}>{guess[\"First appear\"]}</td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Ep')}>\r\n                {guess.Ep}{getComparisonStyle(chosenCharacter, guess, 'Ep').className === 'higher' ? '⬇️' : getComparisonStyle(chosenCharacter, guess, 'Ep').className === 'lower' ? '⬆️' : ''}\r\n              </td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Form')}>\r\n                {guess.Form}{getComparisonStyle(chosenCharacter, guess, 'Form').className === 'higher' ? '⬇️' : getComparisonStyle(chosenCharacter, guess, 'Form').className === 'lower' ? '⬆️' : ''}\r\n              </td>\r\n              <td {...getComparisonStyle(chosenCharacter, guess, 'Era')}>{guess.Era}</td>\r\n              {difficulty === 'easy' && (\r\n                <td {...getComparisonStyle(chosenCharacter, guess, 'Release')}>\r\n                  {guess.Release}{getComparisonStyle(chosenCharacter, guess, 'Release').className === 'higher' ? '⬇️' : getComparisonStyle(chosenCharacter, guess, 'Release').className === 'lower' ? '⬆️' : ''}\r\n                </td>\r\n              )}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerBox;\r\n","import React from 'react';\r\n\r\nconst GameControls = ({ giveUp, resetGame }) => (\r\n  <div>\r\n    <button onClick={giveUp}>Give Up</button>\r\n    <button onClick={resetGame}>Reset</button>\r\n  </div>\r\n);\r\n\r\nexport default GameControls;\r\n","import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport maskRiderData from \"./maskrider.csv\";\nimport DifficultySelector from \"./components/DifficultySelector\";\nimport SearchBar from \"./components/SearchBar\";\nimport AnswerBox from \"./components/AnswerBox\";\nimport GameControls from \"./components/GameControls\";\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [chosenCharacter, setChosenCharacter] = useState(null);\n  const [selectedCharacter, setSelectedCharacter] = useState(null);\n  const [difficulty, setDifficulty] = useState(\"normal\"); // Start with \"Normal\"\n  const [guesses, setGuesses] = useState([]);\n  const [gameWon, setGameWon] = useState(false);\n  const [remainingGuesses, setRemainingGuesses] = useState(12); // Default for \"normal\"\n\n  useEffect(() => {\n    // Load Mask Rider data from CSV\n    Papa.parse(maskRiderData, {\n      download: true,\n      header: true,\n      complete: (result) => {\n        setCharacters(result.data); // Load character data\n      },\n    });\n  }, []);\n\n  useEffect(() => {\n    // Start the game once characters are loaded and difficulty is set\n    if (characters.length > 0) {\n      startGame(difficulty); // Start with the chosen difficulty\n    }\n  }, [characters, difficulty]);\n\n  const startGame = (difficultyLevel) => {\n    const randomCharacter =\n      characters[Math.floor(Math.random() * characters.length)];\n    setChosenCharacter(randomCharacter);\n    console.log(\"Starting game with character:\", randomCharacter);\n    setGuesses([]);\n    setGameWon(false);\n\n    // Set initial guesses based on difficulty level\n    if (difficultyLevel === \"easy\") {\n      setRemainingGuesses(Infinity);\n    } else if (difficultyLevel === \"normal\") {\n      setRemainingGuesses(12);\n    } else if (difficultyLevel === \"hard\") {\n      setRemainingGuesses(6);\n    }\n  };\n\n  const handleGuess = (guessName) => {\n    if (gameWon || remainingGuesses === 0) return; // Stop if game is won or no guesses left\n\n    const guessedCharacter = characters.find(\n      (char) => char.Character === guessName\n    );\n    setSelectedCharacter(guessedCharacter);\n    setGuesses([...guesses, guessedCharacter]);\n\n    // Check if the guessed character is the chosen character\n    if (guessedCharacter.Character === chosenCharacter.Character) {\n      setGameWon(true);\n      alert(\n        `Congratulations! You guessed correctly. The character is ${guessedCharacter.Character}.`\n      );\n      resetGame();\n    } else if (difficulty !== \"easy\") {\n      // Reduce remaining guesses for \"normal\" and \"hard\" difficulties\n      setRemainingGuesses((prev) => prev - 1);\n\n      // Check if guesses are exhausted and trigger Game Over\n      if (remainingGuesses === 1) {\n        alert(`Game Over! The correct answer was ${chosenCharacter.Character}`);\n        resetGame();\n      }\n    }\n  };\n\n  const resetGame = () => {\n    startGame(difficulty); // Restart with the current difficulty\n    setSelectedCharacter(null);\n  };\n\n  const giveUp = () => {\n    alert(`The correct answer was ${chosenCharacter?.Character}`);\n    resetGame();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>MASK RIDLE</h1>\n      <DifficultySelector setDifficulty={setDifficulty} />\n\n      <div className=\"guess-info\">\n        <p>\n          Guesses Left: {remainingGuesses === Infinity ? \"∞\" : remainingGuesses}\n        </p>\n      </div>\n\n      <SearchBar\n        characters={characters}\n        handleGuess={handleGuess}\n        guesses={guesses}\n      />\n      <AnswerBox\n        chosenCharacter={chosenCharacter}\n        guesses={guesses}\n        difficulty={difficulty}\n      />\n      <GameControls giveUp={giveUp} resetGame={resetGame} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/maskrider.48807c4a.csv\";"],"sourceRoot":""}